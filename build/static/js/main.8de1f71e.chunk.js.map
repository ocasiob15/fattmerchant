{"version":3,"sources":["apis/FattMerchantApi.js","App.js","serviceWorker.js","index.js"],"names":["FattMerchantApi","baseEndpoint","fetch","this","method","credentials","headers","then","response","json","catch","error","request","body","JSON","stringify","useStyles","makeStyles","theme","root","flexGrow","paper","padding","spacing","textAlign","color","palette","text","secondary","detailsRoot","width","overflowX","table","minWidth","success","backgroundColor","green","dark","message","display","alignItems","icon","fontSize","iconVariant","opacity","marginRight","TAX_RATE","ccyFormat","num","toFixed","createRow","desc","qty","unit","id","price","priceRow","variantIcon","CheckCircleIcon","MySnackbarContentWrapper","props","classes","className","onClose","variant","other","Icon","SnackbarContent","clsx","aria-describedby","action","IconButton","key","aria-label","onClick","margin","App","fattMerchantApi","React","useState","data","loading","errorMessage","rows","state","setState","open","setOpen","handleClose","event","reason","useEffect","getCatalogItems","console","log","CircularProgress","invoiceSubtotal","map","reduce","sum","i","invoiceTaxes","invoiceTotal","Snackbar","anchorOrigin","vertical","horizontal","autoHideDuration","Grid","container","item","xs","title","columns","field","type","actions","AddIcon","tooltip","rowData","length","push","found","row","RemoveIcon","index","splice","Paper","Typography","Table","TableHead","TableRow","TableCell","align","colSpan","TableBody","rowSpan","Button","submit","lineItems","quantity","createInvoice","customer_id","payment_method_id","meta","tax","subtotal","total","url","send_now","files","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.8de1f71e.chunk.js","sourcesContent":["\nclass FattMerchantApi {\n\n    baseEndpoint = \"https://tzk4q7s8fk.execute-api.us-east-1.amazonaws.com/dev/store\"\n\n    async getCatalogItems() {\n        const extension = \"/catalog\"\n        return fetch(this.baseEndpoint + extension,\n        {\n            method: \"GET\",\n            credentials: \"same-origin\",\n            headers: {\n                'Accept': 'application/json',\n                'Content-Type': 'application/json'\n            }\n        })\n        .then(response => response.json())\n        .catch(error => {throw error})\n    }\n\n    async createInvoice(request) {\n        const extension = \"/checkout/invoice\"\n        return fetch(this.baseEndpoint + extension,\n        {\n            method: \"POST\",\n            credentials: \"same-origin\",\n            body: JSON.stringify(request),\n            headers: {\n                'Accept': 'application/json',\n                'Content-Type': 'application/json'\n            }\n        })\n        .then(response => response.json())\n        .catch(error => {throw error})\n    }\n\n}\n\nexport default FattMerchantApi;","import React, { useEffect } from 'react';\nimport FattMerchantApi from './apis/FattMerchantApi';\nimport { makeStyles } from '@material-ui/core/styles';\nimport MaterialTable from 'material-table';\nimport Grid from '@material-ui/core/Grid';\nimport CircularProgress from '@material-ui/core/CircularProgress';\nimport './App.css';\nimport AddIcon from '@material-ui/icons/Add';\nimport Table from '@material-ui/core/Table';\nimport Typography from '@material-ui/core/Typography';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableRow from '@material-ui/core/TableRow';\nimport Paper from '@material-ui/core/Paper';\nimport Button from '@material-ui/core/Button';\nimport Snackbar from '@material-ui/core/Snackbar';\nimport SnackbarContent from '@material-ui/core/SnackbarContent';\nimport CheckCircleIcon from '@material-ui/icons/CheckCircle';\nimport { green } from '@material-ui/core/colors';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport IconButton from '@material-ui/core/IconButton';\nimport CloseIcon from '@material-ui/icons/Close';\nimport RemoveIcon from '@material-ui/icons/Remove';\n\nconst useStyles = makeStyles(theme => ({\n  root: {\n    flexGrow: 1,\n  },\n  paper: {\n    padding: theme.spacing(2),\n    textAlign: 'center',\n    color: theme.palette.text.secondary,\n  },\n  detailsRoot: {\n    width: '100%',\n    overflowX: 'auto',\n  },\n  table: {\n    minWidth: 700,\n  },\n  success: {\n    backgroundColor: green[600],\n  },\n  error: {\n    backgroundColor: theme.palette.error.dark,\n  },\n  message: {\n    display: 'flex',\n    alignItems: 'center',\n  },\n  icon: {\n    fontSize: 20,\n  },\n  iconVariant: {\n    opacity: 0.9,\n    marginRight: theme.spacing(1),\n  },\n}));\n\nconst TAX_RATE = 0.07;\n\nfunction ccyFormat(num) {\n  return `${num.toFixed(2)}`;\n}\n\nfunction priceRow(qty, unit) {\n  return qty * unit;\n}\n\nfunction createRow(desc, qty, unit, id) {\n  const price = priceRow(qty, unit);\n  return { desc, qty, unit, price, id };\n}\n\nfunction subtotal(items) {\n  return items.map(({ price }) => price).reduce((sum, i) => sum + i, 0);\n}\n\nconst variantIcon = {\n  success: CheckCircleIcon,\n};\n\nfunction MySnackbarContentWrapper(props) {\n  const classes = useStyles();\n  const { className, message, onClose, variant, ...other } = props;\n  const Icon = variantIcon[variant];\n\n  return (\n    <SnackbarContent\n      className={clsx(classes[variant], className)}\n      aria-describedby=\"client-snackbar\"\n      message={\n        <span id=\"client-snackbar\" className={classes.message}>\n          <Icon className={clsx(classes.icon, classes.iconVariant)} />\n          {message}\n        </span>\n      }\n      action={[\n        <IconButton key=\"close\" aria-label=\"close\" color=\"inherit\" onClick={onClose}>\n          <CloseIcon className={classes.icon} />\n        </IconButton>,\n      ]}\n      {...other}\n    />\n  );\n}\n\nMySnackbarContentWrapper.propTypes = {\n  className: PropTypes.string,\n  message: PropTypes.string,\n  onClose: PropTypes.func,\n  variant: PropTypes.oneOf(['error', 'info', 'success', 'warning']).isRequired,\n};\n\nconst useStyles2 = makeStyles(theme => ({\n  margin: {\n    margin: theme.spacing(1),\n  },\n}));\n\nfunction App() {\n  const classes = useStyles();\n  const fattMerchantApi = new FattMerchantApi();\n  const [state, setState] = React.useState({\n    data: null,\n    loading: true,\n    error: false,\n    errorMessage: null,\n    rows: []\n  })\n\n  const [open, setOpen] = React.useState(false);\n\n  const handleClose = (event, reason) => {\n    if (reason === 'clickaway') {\n      return;\n    }\n\n    setOpen(false);\n  };\n\n  useEffect(() => {\n    fattMerchantApi.getCatalogItems()\n    .then(response => {\n      setState({\n        data: response,\n        loading: false,\n        error: false,\n        errorMessage: state.errorMessage,\n        rows: []\n      })\n      console.log(response)\n    }).catch(error => {\n      setState({\n        data: null,\n        loading: false,\n        error: true,\n        errorMessage: error,\n        rows: []\n      })\n    })\n  }, []);\n\n  if (state.loading) {\n    return (\n      <div className=\"App\">\n        <CircularProgress />\n      </div>\n    )\n  } else if (state.error) {\n    return (\n      <div className=\"App\">\n        <p>An error occurred</p>\n        <p>{state.errorMessage}</p>\n      </div>\n    )\n  }\n\n  const columns = [\n    {title: \"Name\", field: \"item\"},\n    {title: \"Price(USD)\", field: \"price\", type: 'numeric'},\n    {title: \"Stock\", field: \"in_stock\"}\n  ]\n  const invoiceSubtotal = subtotal(state.rows);\n  const invoiceTaxes = TAX_RATE * invoiceSubtotal;\n  const invoiceTotal = invoiceTaxes + invoiceSubtotal;\n  return (\n    <div className=\"App\">\n      <Snackbar\n        anchorOrigin={{\n          vertical: 'bottom',\n          horizontal: 'left',\n        }}\n        open={open}\n        autoHideDuration={6000}\n        onClose={handleClose}\n      >\n        <MySnackbarContentWrapper\n          onClose={handleClose}\n          variant=\"success\"\n          message=\"Invoice Successfully created!\"\n        />\n      </Snackbar>\n      <Grid container spacing={1}>\n        <Grid item xs={6}>\n          <MaterialTable\n            title=\"Catalog\"\n            columns={columns}\n            data={state.data.data}\n            actions={[\n              {\n                  icon: AddIcon,\n                  tooltip: 'Add Item To Invoice',\n                  onClick: (event, rowData) => {\n                    if (state.rows.length === 0){\n                      state.rows.push(createRow(rowData.item, 1, rowData.price, rowData.id));\n                    } else {\n                      let found = false\n                      state.rows.map(row => {\n                        if (row.desc === rowData.item) {\n                          row.qty++;\n                          row.price = row.unit * row.qty\n                          found = true\n                        }\n                      })\n                      if (!found) {\n                        state.rows.push(createRow(rowData.item, 1, rowData.price, rowData.id))\n                      }\n                    }\n                    state.rows.map(row => {\n                      row.price = row.qty * row.unit\n                    })\n                    setState({\n                      data: state.data,\n                      loading: state.loading,\n                      error: state.error,\n                      errorMessage: state.errorMessage,\n                      rows: state.rows\n                    })\n                  }\n              },\n              {\n                icon: RemoveIcon,\n                tooltip: 'Remove Item From Invoice',\n                onClick: (event, rowData) => {\n                  if (state.rows.length === 0){\n                    return\n                  } else {\n                    let found = false\n                    let index = 0;\n                    state.rows.map(row => {\n                      if (row.desc === rowData.item) {\n                        row.qty--;\n                        row.price = row.unit * row.qty\n                        found = true\n                        if (row.qty === 0){\n                          state.rows.splice(index, 1);\n                        }\n                      }\n                      index++;\n                    })\n                    if (!found) {\n                      return\n                    }\n                  }\n                  state.rows.map(row => {\n                    row.price = row.qty * row.unit\n                  })\n                  setState({\n                    data: state.data,\n                    loading: state.loading,\n                    error: state.error,\n                    errorMessage: state.errorMessage,\n                    rows: state.rows\n                  })\n                }\n            }\n          ]}\n            />\n        </Grid>\n        <Grid item xs={6}>\n          <Paper className={classes.detailsRoot}>\n            <Typography variant=\"body1\">Invoice</Typography>\n            <Table className={classes.table} aria-label=\"spanning table\">\n              <TableHead>\n                <TableRow>\n                  <TableCell align=\"center\" colSpan={3}>\n                    Details\n                  </TableCell>\n                  <TableCell align=\"right\">Price</TableCell>\n                </TableRow>\n                <TableRow>\n                  <TableCell>Desc</TableCell>\n                  <TableCell align=\"right\">Qty.</TableCell>\n                  <TableCell align=\"right\">Unit</TableCell>\n                  <TableCell align=\"right\">Sum</TableCell>\n                </TableRow>\n              </TableHead>  \n              <TableBody>\n                {state.rows.map(row => (\n                  <TableRow key={row.desc}>\n                    <TableCell>{row.desc}</TableCell>\n                    <TableCell align=\"right\">{row.qty}</TableCell>\n                    <TableCell align=\"right\">{row.unit}</TableCell>\n                    <TableCell align=\"right\">{ccyFormat(row.price)}</TableCell>\n                  </TableRow>\n                ))}\n                <TableRow>\n                  <TableCell rowSpan={3} />\n                  <TableCell colSpan={2}>Subtotal</TableCell>\n                  <TableCell align=\"right\">{ccyFormat(invoiceSubtotal)}</TableCell>\n                </TableRow>\n                <TableRow>\n                  <TableCell>Tax</TableCell>\n                  <TableCell align=\"right\">{`${(TAX_RATE * 100).toFixed(0)} %`}</TableCell>\n                  <TableCell align=\"right\">{ccyFormat(invoiceTaxes)}</TableCell>\n                </TableRow>\n                <TableRow>\n                  <TableCell colSpan={2}>Total</TableCell>\n                  <TableCell align=\"right\">{ccyFormat(invoiceTotal)}</TableCell>\n                </TableRow>\n              </TableBody>\n            </Table>\n            <Button\n                type=\"submit\"\n                variant=\"contained\"\n                color=\"primary\"\n                className={useStyles.submit}\n                onClick={() => {\n                  const lineItems = state.rows.map(row => {\n                    return {\n                      id: row.id,\n                      item: row.desc,\n                      quantity: row.qty,\n                      price: row.price\n                    }\n                  })\n                  setState({\n                    data: state.data,\n                    loading: true,\n                    error: state.error,\n                    errorMessage: state.errorMessage,\n                    rows: state.rows\n                  })\n                  fattMerchantApi.createInvoice(\n                    {\n                      customer_id: \"acdd7dc5-69a4-4d31-9187-67d50007e8d0\",\n                      payment_method_id: \"68758ae5-ccde-4f95-9dfa-078590a2f070\",\n                      meta: {\n                        tax: invoiceTaxes,\n                        subtotal: invoiceSubtotal,\n                        lineItems: lineItems\n                      },\n                      total: invoiceTotal,\n                      url: \"https://omni.fattmerchant.com/#/bill/\",\n                      send_now: false,\n                      files: []\n                    }\n                  ).then(() => {\n                    setOpen(true)\n                    state.rows = []\n                    setState({\n                      data: state.data,\n                      loading: state.loading,\n                      error: state.error,\n                      errorMessage: state.errorMessage,\n                      rows: state.rows\n                    })\n                  })\n                }}\n            >\n                Create Invoice\n            </Button>\n          </Paper>\n        </Grid>\n      </Grid>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}